generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id           String         @id @default(uuid())
  source       String
  src_ref      String?
  status       String         @default("new")
  intentScore  Int            @default(0)
  city         String?
  locality     String?
  propertyType String?
  bedrooms     Int?
  budgetMin    Int?
  budgetMax    Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  contacts      Contact[]
  conversations Conversation[]
  quotes        Quote[]
  project       Project?      @relation("LeadProject")
  journey       LeadJourney?
}

model LeadJourney {
  id               String       @id @default(uuid())
  leadId           String       @unique
  state            JourneyState @default(NEW)
  nextActionAt     DateTime?
  lastActionAt     DateTime?
  lastUserActivityAt DateTime?
  attempts         Int          @default(0)
  lastError        String?
  meta             Json?
  manualSuppressedUntil DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  Lead             Lead         @relation(fields: [leadId], references: [id], onDelete: Cascade)
}

model Contact {
  id               String    @id @default(uuid())
  leadId           String
  name             String?
  role             String?
  phone            String?
  email            String?
  whatsappOptIn    Boolean   @default(false)
  dndFlag          Boolean   @default(false)
  preferredChannel String?
  Lead             Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  consents Consent[]

  @@unique([leadId, phone])
}

model Consent {
  id         String   @id @default(uuid())
  contactId  String
  channel    String
  status     String
  proof      Json?
  recordedAt DateTime @default(now())
  Contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@index([contactId, channel, recordedAt])
}

model Conversation {
  id           String    @id @default(uuid())
  leadId       String
  channel      String
  open         Boolean   @default(true)
  lastIntent   String?
  lastActivity DateTime  @default(now())
  Lead         Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  messages     Message[]

  @@index([leadId, channel, lastActivity])
}

model Message {
  id             String        @id @default(uuid())
  conversationId String
  direction      String
  templateKey    String?
  body           String
  meta           Json?
  createdAt      DateTime      @default(now())
  Conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
}

model Quote {
  id                 String   @id @default(uuid())
  leadId             String
  packageKey         String
  amountEstimateLow  Int
  amountEstimateHigh Int
  pdfUrl             String?
  status             String   @default("draft")
  createdAt          DateTime @default(now())
  Lead               Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
}

model Project {
  id        String   @id @default(uuid())
  leadId    String?  @unique
  code      String
  stage     String
  createdAt DateTime @default(now())
  Lead      Lead?    @relation("LeadProject", fields: [leadId], references: [id], onDelete: SetNull)
}

model McpAudit {
  id     String   @id @default(uuid())
  tool   String
  args   Json
  result Json?
  at     DateTime @default(now())
  actor  String
}

enum JourneyState {
  NEW
  CONSENT_CHECK
  READY
  INTRO_SENT
  NUDGE_1
  NUDGE_2
  PAUSE
  BOOKING
  QUALIFIED
  QUOTE_SENT
  WON
  LOST
  HUMAN_HANDOFF
}
